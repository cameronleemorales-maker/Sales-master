name: Build Android Debug APK

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch: {}

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      ZIP_NAME: SalesMasterApp.zip
      ANDROID_SDK_ROOT: ${{ github.workspace }}/android-sdk
      ANDROID_HOME: ${{ github.workspace }}/android-sdk

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Verify ZIP exists
        run: |
          set -e
          ls -la
          test -f "$ZIP_NAME" || (echo "ZIP '$ZIP_NAME' not found in repo root." && exit 1)

      - name: Unzip project
        run: |
          set -e
          rm -rf project
          mkdir -p project
          unzip -q "$ZIP_NAME" -d project

      - name: Detect Gradle project root
        id: findroot
        shell: bash
        run: |
          set -e
          ROOT=""
          # Prefer settings.gradle.kts or settings.gradle
          if ROOT=$(find project -maxdepth 3 -type f \( -name "settings.gradle.kts" -o -name "settings.gradle" \) -print -quit); then
            :
          fi
          if [[ -z "$ROOT" ]]; then
            echo "Could not find settings.gradle(.kts) in the unzipped project." >&2
            exit 1
          fi
          GRADLE_DIR=$(dirname "$ROOT")
          echo "GRADLE_ROOT=$GRADLE_DIR" >> "$GITHUB_ENV"
          echo "Gradle root is: $GRADLE_DIR"

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      # --- Android SDK (cmdline-tools) install, with license acceptance ---
      - name: Install Android SDK (cmdline-tools)
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "$ANDROID_SDK_ROOT"
          cd "$ANDROID_SDK_ROOT"
          # Download cmdline-tools
          curl -L -o cmdline-tools.zip https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip
          mkdir -p cmdline-tools
          unzip -q cmdline-tools.zip -d cmdline-tools
          # Google ships it as 'cmdline-tools/bin' under a folder named 'cmdline-tools'
          # Move into required structure: cmdline-tools/latest/*
          mkdir -p cmdline-tools/latest
          mv cmdline-tools/cmdline-tools/* cmdline-tools/latest/
          rm -f cmdline-tools.zip

          export PATH="$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$ANDROID_SDK_ROOT/platform-tools:$PATH"
          SDKMANAGER="$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager"

          # Accept licenses (ignore broken pipe noise)
          yes | "$SDKMANAGER" --licenses || true

          # Install packages needed for a modern build
          "$SDKMANAGER" "platform-tools" "platforms;android-34" "build-tools;34.0.0"

          echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT" >> "$GITHUB_ENV"
          echo "ANDROID_HOME=$ANDROID_SDK_ROOT" >> "$GITHUB_ENV"
          echo "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin" >> $GITHUB_PATH
          echo "$ANDROID_SDK_ROOT/platform-tools" >> $GITHUB_PATH

      # Gradle cache + tools (provides system Gradle if wrapper missing)
      - name: Set up Gradle (cache & tools)
        uses: gradle/actions/setup-gradle@v3

      # If wrapper exists, fix permissions; otherwise generate one
      - name: Ensure Gradle wrapper
        shell: bash
        run: |
          set -e
          cd "$GRADLE_ROOT"
          if [[ -f "./gradlew" ]]; then
            chmod +x ./gradlew
            echo "Found gradlew; permissions fixed."
          else
            echo "No gradlew found; generating wrapper with system Gradle..."
            gradle wrapper --no-daemon
            chmod +x ./gradlew
          fi

      # Build
      - name: Build Debug APK
        shell: bash
        run: |
          set -e
          cd "$GRADLE_ROOT"
          ./gradlew --no-daemon --stacktrace assembleDebug

      # Upload APK(s) (uses v4 â€“ not the deprecated v3)
      - name: Upload Debug APK(s)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: debug-apks
          path: |
            ${{ env.GRADLE_ROOT }}/**/build/outputs/**/*.apk
          if-no-files-found: warn
