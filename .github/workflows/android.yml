name: Build Android Debug APK

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch: {}

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      ZIP_NAME: SalesMasterApp.zip
      ANDROID_SDK_ROOT: ${{ github.workspace }}/android-sdk
      ANDROID_HOME: ${{ github.workspace }}/android-sdk

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Verify ZIP exists
        run: |
          set -e
          ls -la
          test -f "$ZIP_NAME" || (echo "ZIP '$ZIP_NAME' not found in repo root." && exit 1)

      - name: Unzip project
        run: |
          set -e
          rm -rf project
          mkdir -p project
          unzip -q "$ZIP_NAME" -d project

      - name: Detect Gradle project root
        id: findroot
        shell: bash
        run: |
          set -e
          ROOT_FILE=$(find project -maxdepth 3 -type f \( -name "settings.gradle.kts" -o -name "settings.gradle" \) -print -quit)
          if [[ -z "$ROOT_FILE" ]]; then
            echo "Could not find settings.gradle(.kts) in the unzipped project." >&2
            exit 1
          fi
          GRADLE_DIR=$(dirname "$ROOT_FILE")
          echo "GRADLE_ROOT=$GRADLE_DIR" >> "$GITHUB_ENV"
          echo "Gradle root is: $GRADLE_DIR"

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Install Android SDK (cmdline-tools & packages)
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "$ANDROID_SDK_ROOT"
          cd "$ANDROID_SDK_ROOT"
          curl -L -o cmdline-tools.zip https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip
          mkdir -p cmdline-tools
          unzip -q cmdline-tools.zip -d cmdline-tools
          mkdir -p cmdline-tools/latest
          mv cmdline-tools/cmdline-tools/* cmdline-tools/latest/
          rm -f cmdline-tools.zip
          export PATH="$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$ANDROID_SDK_ROOT/platform-tools:$PATH"
          yes | "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" --licenses || true
          "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" "platform-tools" "platforms;android-34" "build-tools;34.0.0"
          echo "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin" >> $GITHUB_PATH
          echo "$ANDROID_SDK_ROOT/platform-tools" >> $GITHUB_PATH

      - name: Set up Gradle (cache & tools)
        uses: gradle/actions/setup-gradle@v3

      # --- Key fix: inject a global init script so repos are always available ---
      - name: Inject Gradle init script (force repositories)
        shell: bash
        run: |
          set -e
          mkdir -p "$HOME/.gradle/init.d"
          cat > "$HOME/.gradle/init.d/force-repos.gradle" <<'EOF'
          settingsEvaluated { s ->
              try {
                  s.pluginManagement {
                      repositories {
                          gradlePluginPortal()
                          google()
                          mavenCentral()
                          maven { url "https://jitpack.io" }
                      }
                  }
                  s.dependencyResolutionManagement {
                      repositoriesMode.set(org.gradle.api.initialization.resolve.RepositoriesMode.PREFER_SETTINGS)
                      repositories {
                          google()
                          mavenCentral()
                          maven { url "https://jitpack.io" }
                      }
                  }
              } catch (Throwable ignored) {
              }
          }
          EOF

      # If a wrapper exists, make it executable (but do NOT try to create one)
      - name: Fix Gradle wrapper permissions (if present)
        shell: bash
        run: |
          set -e
          cd "$GRADLE_ROOT"
          if [[ -f "./gradlew" ]]; then
            chmod +x ./gradlew
            echo "Found gradlew; permissions fixed."
          else
            echo "No gradlew present; will use system Gradle."
          fi

      # Build using system Gradle to avoid wrapper-generation failures
      - name: Build Debug APK
        shell: bash
        run: |
          set -e
          cd "$GRADLE_ROOT"
          if [[ -f "./gradlew" ]]; then
            ./gradlew --no-daemon --stacktrace assembleDebug
          else
            gradle --no-daemon --stacktrace assembleDebug
          fi

      - name: Upload Debug APK(s)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: debug-apks
          path: |
            ${{ env.GRADLE_ROOT }}/**/build/outputs/**/*.apk
          if-no-files-found: warn
